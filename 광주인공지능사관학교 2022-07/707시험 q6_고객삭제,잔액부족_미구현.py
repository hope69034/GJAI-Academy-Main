# -*- coding: utf-8 -*-
"""Q6 고객삭제,잔액부족 미구현

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qH47zyMVwJ4Pfp3tjzrJ7b6N4m1GKOTg
"""

#미구현 : 고객삭제기능, 잔액부족시잔액이부족합니다출력예외처리


import pickle
class bank:
    ui='''--------------------------------------- 계좌 관리 프로그램 --------------------------------------- 
1. 계좌생성 | 2. 계좌 목록 | 3. 예금하기 | 4. 출금하기 | 5. 송금 | 6. 내역조회 | 7. 프로그램 종료 
--------------------------------------------------------------------------------------------------

기능 1~7 중 하나를 입력하세요.:'''
    #클래스필드
    계좌_리스트=[]
    #생성자
    def __init__(self,이름,은행이름,계좌번호,예금액,내역):
        self.이름=이름
        self.은행이름=은행이름
        self.계좌번호=계좌번호
        self.예금액=예금액
        self.내역=내역
    #출력값
    def __repr__(self):
        return f'''이름:{self.이름}
은행이름:{self.은행이름}
계좌번호:{self.계좌번호}
남은금액:{self.예금액}'''
    #클래스메서드
    @classmethod  #1. 계좌 생성(계좌번호 입력)
    def f1(cls):
        print()
        print('계좌를 생성하기 위한 이름,은행이름,계좌번호,초기입금액을 입력하세요.')
        print()
        이름=input('이름:')
        은행이름=input('은행이름:')
        계좌번호=int(input('계좌번호(-없이입력):'))
        초기입금액=int(input('초기입금액:'))
        예금액=초기입금액  #계좌잔액
        내역=[초기입금액]  #계좌내역조회를위한리스트
        계좌_정보=bank(이름,은행이름,계좌번호,예금액,내역)
        cls.계좌_리스트.append(계좌_정보)
        print()
        print('새 계좌가 생성되었습니다.')
        print()
    @classmethod # 2. 계좌 목록
    def f2(cls):
        print()
        if len(cls.계좌_리스트)<=0:
            print('등록된 계좌가 하나도 없습니다.')
            print()
            return
        for i,계좌 in enumerate(cls.계좌_리스트): 
            print(f'''{i+1}번 계좌
{계좌}''')
            print()    
        print('계좌 목록 조회 완료')
        print()
    @classmethod # 3. 예금하기
    def f3(cls):
        print()
        if len(cls.계좌_리스트)<=0:
            print()
            print('등록된 계좌가 하나도 없습니다.')
            print()
            return
        for i,계좌 in enumerate(cls.계좌_리스트):
            print() 
            print(f'''등록 번호 {i+1}번 계좌
{계좌}''')
            print()
        nnn_1=int(input('예금할 계좌의 등록번호를 입력하세요.:'))
        nnn_2=int(input('예금할 금액을 숫자만 입력하세요.:'))    
        cls.계좌_리스트[nnn_1-1].예금액 += nnn_2  #계좌잔액업데이트
        cls.계좌_리스트[nnn_1-1].내역.append(nnn_2)  #내역조회를위한 내역리스트에 어펜드
        print(f'''{nnn_1}번 계좌에 {nnn_2}원을 입금하여 
예금액이 {cls.계좌_리스트[nnn_1-1].예금액}원이 되었습니다.''')
        print()

        
    @classmethod # 4. 출금하기
    def f4(cls):
        print()
        if len(cls.계좌_리스트)<=0:
            print('등록된 계좌가 하나도 없습니다.')
            print()
            return
        for i,계좌 in enumerate(cls.계좌_리스트): 
            print(f'''등록 번호 {i+1}번 계좌
{계좌}''')
            print()
        ddd_1=int(input('출금할 계좌의 등록번호를 입력하세요.:'))
        ddd_2=int(input('출금할 금액을 숫자만 입력하세요.:'))    
        cls.계좌_리스트[ddd_1-1].예금액 -= ddd_2
        cls.계좌_리스트[ddd_1-1].내역.append(-ddd_2)
        print(f'''{ddd_1}번 계좌에 {ddd_2}원을 출금하여 
예금액이 {cls.계좌_리스트[ddd_1-1].예금액}원이 되었습니다.''')
        print()
    @classmethod # 5. 송금기능
    def f5(cls):
        print()
        if len(cls.계좌_리스트)<=1:
            print()
            print('계좌가 1개 이하입니다. 계좌가 2개 이상이어야 송금이 가능합니다,')
            print()
            return
        print('송금기능을 시작합니다. 안내에 따라주세요.')
        for i,계좌 in enumerate(cls.계좌_리스트):
            print() 
            print(f'''등록 번호 {i+1}번 계좌
{계좌}''')
            print()
        yyy_1=int(input('송금 받을 계좌의 등록번호를 입력하세요.:'))
        uuu_2=int(input('출금할 계좌의 등록번호를 입력하세요.:'))
        rrr_3=int(input('출금할 금액을 숫자만 입력하세요.:'))    
        cls.계좌_리스트[uuu_2-1].예금액 -= rrr_3
        cls.계좌_리스트[yyy_1-1].예금액 += rrr_3
        cls.계좌_리스트[yyy_1-1].내역.append(rrr_3)
        cls.계좌_리스트[uuu_2-1].내역.append(-rrr_3)
        print()
        print(f'{uuu_2}번 계좌에서 {rrr_3}원을 {yyy_1}번 계좌로 송금하였습니다') 
        print()
        print(f'''{yyy_1}번 계좌의 예금액이 {cls.계좌_리스트[yyy_1-1].예금액}원이 되었고
{uuu_2}번 계좌의 예금액이 {cls.계좌_리스트[uuu_2-1].예금액}원이 되었습니다.''')
        print()

    @classmethod # 6. 내역조회기능
    def f6(cls):
        print()
        if len(cls.계좌_리스트)<=0:
            print()
            print('계좌가 하나도 없습니다')
            print()
            return
        print('내역조회기능입니다.')
        print()
        for i,계좌 in enumerate(cls.계좌_리스트): 
            print(f'''등록번호 {i+1}번 계좌
{계좌}''')
            print()
        www_1=int(input('조회할 계좌의 등록번호를 입력하세요.:'))
        print()
        print(f'등록번호 {www_1}번 계좌의 내역 조회를 시작합니다.')
        print()
        for i, 계좌내역보기 in enumerate(cls.계좌_리스트[www_1-1].내역):
            print(f'''{i+1}번째 내역은 {계좌내역보기}원 입니다.''')
        print(f'잔액:{cls.계좌_리스트[www_1-1].예금액}원') 
        print()
        print('계좌내역조회가 끝났습니다.')
        print()

    @classmethod # 7. 프로그램 종료
    def f7(cls):
        print()
        pickle.dump( cls.계좌_리스트,open('bank_num_list' ,'wb')) 
        print('계좌_리스트를 저장하고 계좌 관리 프로그램을 종료합니다.')
        return True
        print()

    @classmethod
    def f8(cls):  #  8. 숫자잘못입력했을떄
        print()
        print('기능은 1~7뿐입니다. 다시 입력하세요.')
        print()
#메인문
def main() : 
    try:
        pickle.load(open('bank_num_list' ,'rb')) 
    except:
        print()
        print('등록된 계좌가 없습니다.')
        print()
    else:   
        print()
        bank.계좌_리스트=pickle.load(open('bank_num_list' ,'rb'))
        print('보유 중인 계좌 목록을 불러왔습니다.')
        print()
    try:
        run=False
        while not run:
            n=int(input(bank.ui))
            코드모델=[bank.f1,bank.f2,bank.f3,bank.f4,bank.f5,bank.f6,bank.f7,bank.f8]
            if 1<=n<=7:
                run=코드모델[n-1]()
            else:
                코드모델[-1]()
    except:
        print('잘못 입력하셨습니다. 프로그램을 재시작합니다.')
        main()
#실행문
if __name__=='__main__':
    main()
